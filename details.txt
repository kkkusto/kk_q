import datetime

# -----------------------------------------------
# Metadata/Read-Only Queries
# -----------------------------------------------
def format_get_partitions_query(source_database, table_name):
    """
    Returns a SQL command to show partitions of a given table.
    
    Args:
        source_database (str): The name of the source database.
        table_name (str): The name of the table to show partitions for.

    Returns:
        str: The SQL command to show the table's partitions.
    """
    cmd = "SHOW PARTITIONS {}.{}".format(source_database, table_name)
    return cmd


def format_describe_query(table_name):
    """
    Returns a SQL command to describe a given table's schema.
    
    Args:
        table_name (str): The name of the table to describe.

    Returns:
        str: The SQL command to describe the table's schema.
    """
    describe_cmd = "DESCRIBE {}".format(table_name)
    return describe_cmd


def format_get_create_query(joined_table_name):
    """
    Returns a SQL command to show the CREATE statement of a given table.
    
    Args:
        joined_table_name (str): The fully qualified name of the table.

    Returns:
        str: The SQL command to show the table's CREATE statement.
    """
    create_query = "SHOW CREATE TABLE {}".format(joined_table_name)
    return create_query


def format_get_count_query(table_name, where=None):
    """
    Returns a SQL command to get the count of rows from a table, optionally filtered by a WHERE clause.
    
    Args:
        table_name (str): The name of the table.
        where (str, optional): An optional WHERE clause to filter rows.

    Returns:
        str: The SQL command to get the row count from the table.
    """
    get_count_sql_query = "SELECT COUNT(*) FROM {}".format(table_name)
    if where:
        get_count_sql_query += " WHERE {}".format(where)
    return get_count_sql_query


def format_select_part2_query(table_name, condition):
    """
    Returns a SQL command to select all rows from a table filtered by a condition.
    
    Args:
        table_name (str): The name of the table.
        condition (str): A SQL condition (e.g., "col='value'").

    Returns:
        str: The SQL SELECT command with the specified condition.
    """
    return "SELECT * FROM {} WHERE {}".format(table_name, condition)


# -----------------------------------------------
# DDL (Data Definition Language) Queries
# -----------------------------------------------
def format_add_partition_query(table_name, partitions_dict):
    """
    Returns a SQL command to add a partition to a table if it does not exist.
    
    Args:
        table_name (str): The name of the table.
        partitions_dict (dict): A dictionary of partition key-value pairs. 
            Example: {"date": "2024-01-01", "region": "US"}

    Returns:
        str: The SQL command to add the partition.
    """
    query = "ALTER TABLE {} ADD IF NOT EXISTS PARTITION (".format(table_name)
    partitions = ["{} = '{}'".format(key, value) for key, value in partitions_dict.items()]
    query += ", ".join(partitions) + ");"
    return query


def format_delete_partition_query(table_name, partitions_dict, where=None):
    """
    Returns a SQL command to drop a specific partition from a table, optionally filtered by a WHERE clause.
    
    Args:
        table_name (str): The name of the table.
        partitions_dict (dict): A dictionary of partition key-value pairs identifying the partition to drop.
        where (str, optional): An optional WHERE clause to further filter partitions to drop.

    Returns:
        str: The SQL command to drop the specified partition.
    """
    partitions = ["{} = '{}'".format(key, value) for key, value in partitions_dict.items()]
    partition_str = ", ".join(partitions)
    cmd_delete_data = "ALTER TABLE {} DROP PARTITION ({})".format(table_name, partition_str)
    if where:
        cmd_delete_data += " WHERE {}".format(where)
    return cmd_delete_data


# -----------------------------------------------
# DML (Data Manipulation Language) Queries
# -----------------------------------------------
def format_insert_data_query(table_name_part1, table_name_part2, partitions_dict, condition, column_names):
    """
    Returns a SQL command to insert data into a partitioned table (part2) from another table (part1),
    filtered by a given condition and including only the specified columns.
    
    Args:
        table_name_part1 (str): The source table name from which data is selected.
        table_name_part2 (str): The target table name into which data is inserted.
        partitions_dict (dict): Dictionary defining the partition values for the target table.
        condition (str): A SQL condition (e.g., "date='2024-01-01'") to filter source data.
        column_names (list[str]): The list of column names to select from the source table.

    Returns:
        str: The SQL INSERT command to copy data from table_name_part1 to table_name_part2.
    """
    partitions = ["{} = '{}'".format(key, value) for key, value in partitions_dict.items()]
    partition_str = ", ".join(partitions)
    column_names_str = ", ".join(column_names)
    cmd_insert_data = "INSERT INTO {} PARTITION ({}) SELECT {} FROM {} WHERE {}".format(
        table_name_part2, partition_str, column_names_str, table_name_part1, condition
    )
    return cmd_insert_data


# -----------------------------------------------
# Logging and Archival Operation Queries
# -----------------------------------------------
def format_create_archival_operation_table_query(source_database):
    """
    Returns a SQL command to create the archival_operation_log table if it does not exist.
    
    Args:
        source_database (str): The name of the database in which to create the table.

    Returns:
        str: The SQL command to create the archival_operation_log table.
    """
    create_table_sql_query = """
    CREATE TABLE IF NOT EXISTS {}.archival_operation_log (
        batch_id STRING,
        table_name_part1 STRING,
        table_name_part2 STRING,
        source_database STRING,
        candidate_partition STRING,
        modified_partitions_part2 STRING,
        status BOOLEAN,
        operation_datetime TIMESTAMP,
        part2_table_location STRING,
        is_inserted_to_part2 BOOLEAN,
        is_deleted_from_part1 BOOLEAN,
        rollback_required BOOLEAN,
        rollback_success BOOLEAN
    );
    """.format(source_database)
    return create_table_sql_query


def format_insert_archival_op_query(
    table_name_part1, table_name_part2, source_database, partition,
    modified_partitions_part2, batch_id, status, part2_table_location="",
    is_inserted_to_part2=False, is_deleted_from_part1=False,
    rollback_required=False, rollback_success=False
):
    """
    Returns a SQL command to insert a single archival operation record into the archival_operation_log table.
    
    Args:
        table_name_part1 (str): The part1 table name involved in the operation.
        table_name_part2 (str): The part2 table name involved in the operation.
        source_database (str): The source database name.
        partition (str): The candidate partition involved in the operation.
        modified_partitions_part2 (str): Partitions added or modified in part2 during the operation.
        batch_id (str): The batch identifier for the operation.
        status (bool): The status of the operation (True = success, False = failure).
        part2_table_location (str, optional): The HDFS location of the part2 table. Defaults to "".
        is_inserted_to_part2 (bool, optional): Whether data was inserted into part2. Defaults to False.
        is_deleted_from_part1 (bool, optional): Whether data was deleted from part1. Defaults to False.
        rollback_required (bool, optional): Whether a rollback is required. Defaults to False.
        rollback_success (bool, optional): Whether rollback was successful. Defaults to False.

    Returns:
        str: The SQL INSERT command for the archival_operation_log table.
    """
    query = """
    INSERT INTO {}.archival_operation_log (
        table_name_part1, table_name_part2, source_database,
        candidate_partition, modified_partitions_part2,
        operation_datetime, batch_id, status, failed_query, comment,
        part2_table_location, is_inserted_to_part2, is_deleted_from_part1,
        rollback_required, rollback_success
    ) VALUES (
        '{}', '{}', '{}', '{}', '{}', '{}', '{}', {}, '{}', '{}',
        '{}', {}, {}, {}, {}
    );
    """.format(
        source_database,
        table_name_part1, table_name_part2, source_database, partition,
        modified_partitions_part2, datetime.datetime.now(), batch_id,
        status, "", "", part2_table_location, is_inserted_to_part2,
        is_deleted_from_part1, rollback_required, rollback_success
    )
    return query


def format_batch_insert_log_query(source_database, data):
    """
    Returns a SQL command to batch insert multiple archival operation records into the archival_operation_log table.
    
    Args:
        source_database (str): The database name containing the archival_operation_log table.
        data (list[list]): A list of rows to insert. Each row corresponds to columns:
            [
                table_name_part1, table_name_part2, source_database, candidate_partition,
                modified_partitions_part2, operation_datetime (datetime object),
                batch_id, status (boolean), part2_table_location,
                is_inserted_to_part2 (boolean), is_deleted_from_part1 (boolean),
                rollback_required (boolean), rollback_success (boolean)
            ]

    Returns:
        str: A SQL INSERT statement that inserts all given rows into archival_operation_log.
    """
    columns = [
        "table_name_part1", "table_name_part2", "source_database",
        "candidate_partition", "modified_partitions_part2",
        "operation_datetime", "batch_id", "status",
        "part2_table_location", "is_inserted_to_part2",
        "is_deleted_from_part1", "rollback_required", "rollback_success"
    ]
    query = "INSERT INTO {}.archival_operation_log ({}) VALUES ".format(source_database, ", ".join(columns))
    values_list = []

    for row in data:
        formatted_values = []
        for value in row:
            if isinstance(value, str):
                # Escape single quotes in strings
                formatted_values.append("'{}'".format(value.replace("'", "\\'")))
            elif isinstance(value, datetime.datetime):
                # Format datetime as a string
                formatted_values.append("'{}'".format(value.strftime('%m-%d-%Y %H:%M:%S')))
            else:
                # For booleans or other types
                formatted_values.append(str(value))
        values_list.append("({})".format(", ".join(formatted_values)))

    query += ", ".join(values_list) + ";"
    return query
